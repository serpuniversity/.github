name: Update Gist

on:
  workflow_call:
    inputs:
      file_path:
        description: 'Path to the markdown file (.md) in the repository to update in gist'
        required: true
        type: string
      gist_id:
        description: 'The ID of the existing gist to update'
        required: true
        type: string
    secrets:
      GH_PAT_PROFESSOR_SERP:
        required: true

jobs:
  update-gist:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate and read markdown file
        id: read_file
        shell: bash
        run: |
          # Check if file exists
          if [ ! -f "${{ inputs.file_path }}" ]; then
            echo "Error: File not found at ${{ inputs.file_path }}"
            exit 1
          fi
          
          # Check if file is markdown
          if [[ ! "${{ inputs.file_path }}" =~ \.md$ ]]; then
            echo "Error: File must be a markdown file (.md)"
            exit 1
          fi
          
          # Read the file content (raw, not JSON-encoded yet)
          FILE_CONTENT=$(cat "${{ inputs.file_path }}")
          echo "file_content<<EOF" >> $GITHUB_OUTPUT
          echo "$FILE_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get the filename
          FILENAME=$(basename "${{ inputs.file_path }}")
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          
          # Extract title from frontmatter if it exists and save to file
          if head -n 1 "${{ inputs.file_path }}" | grep -q "^---"; then
            # File has frontmatter, extract title
            # Use awk and save directly to file to preserve special characters
            awk '/^---$/{f=1;next}/^---$/{f=0}f && /^title:/{sub(/^title:[[:space:]]*/, ""); print; exit}' "${{ inputs.file_path }}" > /tmp/description.txt
            # Remove surrounding quotes only if they exist
            sed -i 's/^"\(.*\)"$/\1/' /tmp/description.txt
            sed -i "s/^'\(.*\)'$/\1/" /tmp/description.txt
          else
            # Use default description
            echo "Mirror of ${{ inputs.file_path }} from ${{ github.repository }}" > /tmp/description.txt
          fi
          
          # Read description from file for output
          DESCRIPTION=$(cat /tmp/description.txt)
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Update existing gist
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_PROFESSOR_SERP }}
        shell: bash
        run: |
          # Prepare the gist payload
          FILENAME="${{ steps.read_file.outputs.filename }}"
          GIST_ID="${{ inputs.gist_id }}"
          
          # First, check if the gist exists
          GIST_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/gists/$GIST_ID)
          
          if [ "$GIST_CHECK" != "200" ]; then
            echo "Error: Gist with ID $GIST_ID not found or not accessible"
            exit 1
          fi
          
          # Create modified content with source link in frontmatter
          # First, check if file has frontmatter
          if head -n 1 "${{ inputs.file_path }}" | grep -q "^---"; then
            # File has frontmatter, inject source_url into it
            awk -v repo="${{ github.repository }}" -v branch="${{ github.ref_name }}" -v file="${{ inputs.file_path }}" '
              BEGIN {in_fm=0; added=0}
              /^---$/ && in_fm==0 {in_fm=1; print; next}
              /^---$/ && in_fm==1 {
                if (!added) {
                  print "source_url: https://github.com/" repo "/blob/" branch "/" file
                  print "source_repo: " repo
                  print "mirrored_at: " strftime("%Y-%m-%dT%H:%M:%SZ", systime())
                }
                in_fm=0; print; next
              }
              in_fm==1 && /^source_url:/ {next}  # Skip existing source_url
              in_fm==1 && /^source_repo:/ {next}  # Skip existing source_repo
              in_fm==1 && /^mirrored_at:/ {next}  # Skip existing mirrored_at
              {print}
            ' "${{ inputs.file_path }}" > /tmp/content_with_metadata.md
          else
            # No frontmatter, add one with source link
            {
              echo "---"
              echo "source_url: https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/${{ inputs.file_path }}"
              echo "source_repo: ${{ github.repository }}"
              echo "mirrored_at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
              echo "---"
              echo ""
              cat "${{ inputs.file_path }}"
            } > /tmp/content_with_metadata.md
          fi
          
          # Read the raw file content and create JSON payload for update
          # Read description from file to preserve special characters
          GIST_DESC=$(cat /tmp/description.txt)
          cat /tmp/content_with_metadata.md | jq -Rs --arg desc "$GIST_DESC" --arg fname "$FILENAME" \
            '{description: $desc, files: {($fname): {content: .}}}' > payload.json
          
          # Debug: show the payload
          echo "Payload content:"
          jq . payload.json
          
          # Update the gist using GitHub API (PATCH method)
          RESPONSE=$(curl -s -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/gists/$GIST_ID \
            -d @payload.json)
          
          # Extract and display the gist URL
          GIST_URL=$(echo "$RESPONSE" | jq -r '.html_url')
          
          if [ "$GIST_URL" = "null" ] || [ -z "$GIST_URL" ]; then
            echo "Error updating gist:"
            echo "$RESPONSE" | jq .
            exit 1
          fi
          
          echo "‚úÖ Gist updated successfully!"
          echo "üìé Gist URL: $GIST_URL"
          echo "üìÅ Updated file: ${{ inputs.file_path }}"
          echo "üÜî Gist ID: $GIST_ID"